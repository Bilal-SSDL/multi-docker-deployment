
# Docker compose for production use
version: "3"
services:
  client:
    image: "bilal5528/multi-client"
    mem_limit: 128m
    hostname: client
  server:
    image: "bilal5528/multi-server"
    mem_limit: 128m
    hostname: api
    environment:
      - REDIS_HOST=$REDIS_HOST
      - REDIS_PORT=$REDIS_PORT
      - PGUSER=$PGUSER
      - PGHOST=$PGHOST
      - PGDATABASE=$PGDATABASE
      - PGPASSWORD=$PGPASSWORD
      - PGPORT=$PGPORT
  worker:
    image: "bilal5528/multi-worker"
    mem_limit: 128m
    hostname: worker
    environment:
      - REDIS_HOST=$REDIS_HOST
      - REDIS_PORT=$REDIS_PORT
  nginx:
    image: "bilal5528/multi-nginx"
    mem_limit: 128m
    hostname: nginx
    ports:
      - "80:80"

# version: '3'
# services:
#   postgres:
#     image: 'postgres:latest'
#     environment:
#       - POSTGRES_PASSWORD=postgres_password
#   redis:
#     image: 'redis:latest'
#   nginx:
#     depends_on:
#       - api
#       - client
  #   restart: always
  #   build:
  #     dockerfile: Dockerfile.dev
  #     context: ./nginx
  #   ports:
  #     - '3050:80'
  # api:
  #   build:
  #     dockerfile: Dockerfile.dev
  #     context: ./server
  #   volumes:
  #     - /app/node_modules
  #     - ./server:/app
  #   environment:
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #     - PGUSER=postgres
  #     - PGHOST=postgres
  #     - PGDATABASE=postgres
  #     - PGPASSWORD=postgres_password
  #     - PGPORT=5432
  # client:
  #   stdin_open: true
  #   build:
  #     dockerfile: Dockerfile.dev
  #     context: ./client
  #   volumes:
  #     - /app/node_modules
  #     - ./client:/app
  # worker:
  #   build:
  #     dockerfile: Dockerfile.dev
  #     context: ./worker
  #   volumes:
  #     - /app/node_modules
  #     - ./worker:/app
  #   environment:
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
